import React, { useState, useEffect } from 'react';
import {
    message,
    Table,
    Drawer,
    Space,
    Popconfirm,
    Form,
    Input,
    Button,
    Select,
    Card,
    DatePicker
} from 'antd';
import { PageContainer } from '@ant-design/pro-layout';
import {
    ModalForm,
    ProFormText,
    ProFormRadio,
    ProFormUploadButton,
    ProFormTextArea,
    ProFormSelect,
    ProFormCheckbox,
    ProFormDatePicker
} from '@ant-design/pro-form';
import type { ProDescriptionsItemProps } from '@ant-design/pro-descriptions';
import ProDescriptions from '@ant-design/pro-descriptions';
import type { FormValueType } from './components/UpdateForm';
import UpdateForm from './components/UpdateForm';
import {
    list${BusinessName},
    get${BusinessName},
    add${BusinessName},
    update${BusinessName},
    remove${BusinessName},
} from '@/services/${moduleName}/${ClassName}';
import type { ColumnsType } from 'antd/es/table';
import { EditOutlined, PlusOutlined, DeleteOutlined } from '@ant-design/icons';


/**
 * @zh-CN 查看详情
 */
const handleDetail = async (id: any) => {
    try {
        const resData = await get${BusinessName}(id);
        return resData.data;
    } catch (error) {
        message.error('Adding failed, please try again!');
        return null;
    }
};

/**
 * @zh-CN 添加
 */
const handleAdd = async (fields: ${moduleName}.${ClassName}) => {
    const hide = message.loading('正在添加');
    try {
        await add${BusinessName}({ ...fields });
        hide();
        message.success('Added successfully');
        return true;
    } catch (error) {
        hide();
        message.error('Adding failed, please try again!');
        return false;
    }
};

/**
 * @zh-CN 更新
 *
 * @param fields
 */
const handleUpdate = async (fields: FormValueType) => {
    const hide = message.loading('更新中');
    try {
        await update${BusinessName}({
            ...fields,
        });
        hide();

        message.success('更新成功！');
        return true;
    } catch (error) {
        hide();
        message.error('更新失败，请稍后重试!');
        return false;
    }
};

/**
 * @zh-CN 删除
 */
const handleRemove = async (ids: any[]) => {
    const hide = message.loading('正在删除');
    if (!ids) return true;
    try {
        await remove${BusinessName}(ids);
        hide();
        message.success('删除成功');
        return true;
    } catch (error) {
        hide();
        message.error('删除失败, 请稍后重试');
        return false;
    }
};

const ${ClassName}List: React.FC = () => {
    /**
     * @zh-CN 新建窗口的弹窗
     *  */
    const [createModalVisible, handleModalVisible] = useState<boolean>(false);
    /**
     * @zh-CN 分布更新窗口的弹窗
     * */
    const [updateModalVisible, handleUpdateModalVisible] = useState<boolean>(false);

    const [showDetail, setShowDetail] = useState<boolean>(false);

    const [currentRow, setCurrentRow] = useState<${moduleName}.${ClassName}>();
    const [data, setData] = useState<${moduleName}.${ClassName}[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    const handleRequestList${BusinessName} = (params?: ${moduleName}.${ClassName} | {}) => {
        setLoading(true);
        list${BusinessName}({ ...params }).then((res: ${moduleName}.ResponseResult) => {
            setLoading(false);
            setData(res.rows);
        });
    };

    const columns: ColumnsType<${moduleName}.${ClassName}> = [
        #foreach($column in $columns)
            #set($javaField=$column.javaField)
            #set($parentheseIndex=$column.columnComment.indexOf("（"))
            #if($parentheseIndex != -1)
                #set($comment=$column.columnComment.substring(0, $parentheseIndex))
            #else
                #set($comment=$column.columnComment)
            #end
            {
                title: '${comment}',
                dataIndex: '${javaField}',
                key: '${javaField}',
            },
        #end
        {
            title: '操作',
            dataIndex: 'options',
            key: 'options',
            render: (text: any, record: ${moduleName}.${ClassName}) => (
                <Space size="middle">
                    <a
                        onClick={() => {
                            setCurrentRow(record);
                            handleUpdateModalVisible(true);
                        }}
                    >
                        <EditOutlined />
                        修改
                    </a>
                    <Popconfirm
                        title="确定要删除${BusinessName}?"
                        onConfirm={async () => {
                            const result = await handleRemove([record]);
                            if (result) {
                                handleRequestList${BusinessName}({});
                            }
                        }}
                        onCancel={() => {}}
                        okText="确定"
                        cancelText="取消"
                    >
                        <a>
                            <DeleteOutlined />
                            删除
                        </a>
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    useEffect(() => {
        handleRequestList${BusinessName}({});
    }, []);

    const [form] = Form.useForm();

    return (
        <PageContainer>
            <>
                <Card bordered={false} style={{ width: '100%', marginBottom: 20 }}>
                    <Form
                        form={form}
                        name="horizontal_login"
                        layout="inline"
                        onFinish={(values: any) => {
                            handleRequestList${BusinessName}({ ...values });
                        }}
                    >
                        #foreach($column in $columns)
                            #if($column.query)
                                #set($dictType=$column.dictType)
                                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                                #if($parentheseIndex != -1)
                                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                                #else
                                    #set($comment=$column.columnComment)
                                #end
                                #if($column.htmlType == "input")
                                    <Form.Item name="${column.javaField}" label="${comment}">
                                        <Input placeholder="${comment}" />
                                    </Form.Item>
                                #elseif(($column.htmlType == "select" || $column.htmlType == "radio"))
                                    <Form.Item label="${comment}" name="${column.javaField}">
                                        <Select style={{ width: 200 }}>
                                            <Select.Option value="" key={0}>
                                                请选择字典生成
                                            </Select.Option>
                                        </Select>
                                    </Form.Item>
                                #elseif($column.htmlType == "datetime" && $column.queryType != "BETWEEN")
                                    <Form.Item name="${column.javaField}" label="${comment}">
                                        <DatePicker />
                                    </Form.Item>
                                #elseif($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
                                    <Form.Item name="daterange${AttrName}" label="${comment}">
                                        <RangePicker />
                                    </Form.Item>
                                #end
                            #end
                        #end
                        <Form.Item shouldUpdate>
                            <Button type="primary" htmlType="submit">
                                查询
                            </Button>
                        </Form.Item>
                        <Form.Item shouldUpdate>
                            <Button
                                type="primary"
                                htmlType="button"
                                onClick={() => {
                                    form.resetFields();
                                    handleRequestList${BusinessName}({});
                                }}
                            >
                                重置
                            </Button>
                        </Form.Item>
                    </Form>
                </Card>
                <Button
                    type="primary"
                    htmlType="button"
                    onClick={() => {
                        handleModalVisible(true);
                    }}
                >
                    新增
                </Button>
                <Table
                    rowKey="${pkColumn.javaField}"
                    columns={columns}
                    dataSource={data}
                    pagination={false}
                    loading={loading}
                />
                <ModalForm
                    modalProps={{ destroyOnClose: true }}
                    title="添加${BusinessName}"
                    width="70%"
                    visible={createModalVisible}
                    onVisibleChange={handleModalVisible}
                    onFinish={async (value) => {
                        const success = await handleAdd(value as ${moduleName}.${ClassName});
                        if (success) {
                            handleModalVisible(false);
                            handleRequestList${BusinessName}({});
                        }
                    }}
                >
    #foreach($column in $columns)
        #set($field=$column.javaField)
        #if($column.insert && !$column.pk)
            #if(($column.usableColumn) || (!$column.superColumn))
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                #set($dictType=$column.dictType)
                #if($column.htmlType == "input")
                    <ProFormText width="md" name="${field}" label="${comment}" />
                #elseif($column.htmlType == "imageUpload" || $column.htmlType == "fileUpload")
                    <ProFormUploadButton
                        width="md"
                        name="${field}"
                        label="${comment}"
                        max={1}
                        fieldProps={{
                            name: '${field}',
                        }}
                        action="#"
                        extra=""
                    />
                #elseif($column.htmlType == "editor")
                    <ProFormTextArea
                        width="md"
                        name="${field}"
                        label="${comment}"
                        placeholder="请输入${comment}"
                    />
                #elseif($column.htmlType == "select")
                    <ProFormSelect
                        width="md"
                        name="${field}"
                        label="${comment}"
                        valueEnum={{
                            china: '请选择字典生成',
                            usa: '请选择字典生成',
                        }}
                    />
                #elseif($column.htmlType == "checkbox")
                <ProFormCheckbox.Group
                    width="md"
                    name="${field}"
                    layout="horizontal"
                    label="${comment}"
                    options={['请选择字典生成']}
                />
                #elseif($column.htmlType == "radio")
                <ProFormRadio.Group
                    width="md"
                    name="${field}"
                    label="${comment}"
                    options={[
                        {
                            label: '请选择字典生成',
                            value: '',
                        },
                    ]}
                />
                #elseif($column.htmlType == "datetime")
                    <ProFormDatePicker width="md" name="${field}" label="${comment}" />
                #elseif($column.htmlType == "textarea")
                    <ProFormTextArea
                        width="md"
                        name="${field}"
                        label="${comment}"
                        placeholder="请输入${comment}"
                    />
                #end
            #end
        #end
    #end
                </ModalForm>
                <UpdateForm
                    onSubmit={async (value) => {
                        const success = await handleUpdate({ ...currentRow, ...value });
                        if (success) {
                            handleUpdateModalVisible(false);
                            setCurrentRow(undefined);
                            handleRequestDept({});
                        }
                    }}
                    onCancel={(value: boolean | undefined) => {
                        if (!value) {
                            handleUpdateModalVisible(false);
                            if (!showDetail) {
                                setCurrentRow(undefined);
                            }
                        }
                    }}
                    updateModalVisible={updateModalVisible}
                    values={currentRow || {}}
                />

                <Drawer
                    width={600}
                    visible={showDetail}
                    onClose={() => {
                        setCurrentRow(undefined);
                        setShowDetail(false);
                    }}
                    closable={false}
                >
                    {currentRow?.deptName && (
                        <ProDescriptions<${moduleName}.${ClassName}>
                            column={2}
                            title={currentRow?.${pkColumn.javaField}}
                            request={async () => ({
                                data: currentRow || {},
                            })}
                            params={{
                                id: currentRow?.${pkColumn.javaField},
                            }}
                            columns={columns as ProDescriptionsItemProps<${moduleName}.${ClassName}>[]}
                        />
                    )}
                </Drawer>
            </>
        </PageContainer>
    );
};

export default DeptList;
